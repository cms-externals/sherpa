namespace AMEGIC {

  template <>
  inline Complex Basic_Yfunc::YT<+1,+1>(const int t1,const int t2,const Complex& cR,const Complex& cL)
  { return BS->Mu(t1)*cR*BS->Eta(t2)+BS->Mu(t2)*cL*BS->Eta(t1); }

  template <>
  inline Complex Basic_Yfunc::YT<-1,-1>(const int t1,const int t2,const Complex& cR,const Complex& cL)
  { return BS->Mu(t1)*cL*BS->Eta(t2)+BS->Mu(t2)*cR*BS->Eta(t1); }

  template <>
  inline Complex Basic_Yfunc::YT<+1,-1>(const int t1,const int t2,const Complex& cR,const Complex& cL)
  { return cL*BS->S0d(t1,t2); }

  template <>
  inline Complex Basic_Yfunc::YT<-1,+1>(const int t1,const int t2,const Complex& cR,const Complex& cL)
  { return cR*BS->S1d(t1,t2); }

  template <>
  inline Complex Basic_Xfunc::XT<+1,+1>(const int t1,const int t2,const int t3,const Complex& cR,const Complex& cL)
  {   return cL*BS->Eta(t2)*BS->Eta(t2)*BS->Mu(t1)*BS->Mu(t3)+
             cR*(BS->Eta(t1)*BS->Eta(t3)*BS->Mu(t2)*BS->Mu(t2)+
             BS->S0d(t1,t2)*BS->S1d(t2,t3));
  }
  
  template <>
  inline Complex Basic_Xfunc::XT<-1,-1>(const int t1,const int t2,const int t3,const Complex& cR,const Complex& cL)
  { return cR*BS->Eta(t2)*BS->Eta(t2)*BS->Mu(t1)*BS->Mu(t3)+
           cL*(BS->Eta(t1)*BS->Eta(t3)*BS->Mu(t2)*BS->Mu(t2)+
               BS->S1d(t1,t2)*BS->S0d(t2,t3));
  }

  template <>
  inline Complex Basic_Xfunc::XT<+1,-1>(const int t1,const int t2,const int t3,const Complex& cR,const Complex& cL)
  { 
    return BS->Eta(t2)*(cL*BS->Mu(t1)*BS->S0d(t2,t3)+
                        cR*BS->Mu(t3)*BS->S0d(t1,t2));
  }
  
  template <>
  inline Complex  Basic_Xfunc::XT<-1,+1>(const int t1,const int t2,const int t3,const Complex& cR,const Complex& cL)
  { return BS->Eta(t2)*(cR*BS->Mu(t1)*BS->S1d(t2,t3)+
                        cL*BS->Mu(t3)*BS->S1d(t1,t2));
  } 

//massive ZT's

template<>
inline Complex Basic_Zfunc::ZTM<+1,+1,+1,+1>(const int t1,const int t2,const int t3,const int t4,
				     const Complex& cR1,const Complex& cL1,
				     const Complex& cR2,const Complex& cL2) {
  return -2.*(BS->S0d(t3,t1)*BS->S1d(t4,t2)*cR1*cR2
	      -BS->Mu(t1)*BS->Mu(t2)*BS->Eta(t3)*BS->Eta(t4)*cR2*cL1
	      -BS->Mu(t3)*BS->Mu(t4)*BS->Eta(t1)*BS->Eta(t2)*cR1*cL2);
}


template<>
inline Complex Basic_Zfunc::ZTM<-1,-1,-1,-1>(const int t1,const int t2,const int t3,const int t4,
				     const Complex& cR1,const Complex& cL1,
				     const Complex& cR2,const Complex& cL2) {
  return -2.*( BS->S1d(t3,t1)*BS->S0d(t4,t2)*cL1*cL2
	      -BS->Mu(t1)*BS->Mu(t2)*BS->Eta(t3)*BS->Eta(t4)*cL2*cR1
	      -BS->Mu(t3)*BS->Mu(t4)*BS->Eta(t1)*BS->Eta(t2)*cL1*cR2);
}

template<>
inline Complex Basic_Zfunc::ZTM<+1,+1,+1,-1>(const int t1,const int t2,const int t3,const int t4,
				     const Complex& cR1,const Complex& cL1,
				     const Complex& cR2,const Complex& cL2) {
  return -2.*BS->Eta(t2)*cR1*( BS->S0d(t4,t1)*BS->Mu(t3)*cL2 -
			       BS->S0d(t3,t1)*BS->Mu(t4)*cR2 );
}

template<>
inline Complex Basic_Zfunc::ZTM<+1,+1,-1,+1>(const int t1,const int t2,const int t3,const int t4,
				     const Complex& cR1,const Complex& cL1,
				     const Complex& cR2,const Complex& cL2) {
  return -2.*BS->Eta(t1)*cR1*( BS->S1d(t2,t3)*BS->Mu(t4)*cL2 -
			       BS->S1d(t2,t4)*BS->Mu(t3)*cR2 );
}

template<>
inline Complex Basic_Zfunc::ZTM<+1,-1,+1,+1>(const int t1,const int t2,const int t3,const int t4,
				     const Complex& cR1,const Complex& cL1,
				     const Complex& cR2,const Complex& cL2) {
  return -2.*BS->Eta(t4)*cR2*( BS->S0d(t3,t1)*BS->Mu(t2)*cR1 -
			       BS->S0d(t3,t2)*BS->Mu(t1)*cL1 );
}

template<>
inline Complex Basic_Zfunc::ZTM<-1,+1,+1,+1>(const int t1,const int t2,const int t3,const int t4,
				     const Complex& cR1,const Complex& cL1,
				     const Complex& cR2,const Complex& cL2) {
  return -2.*BS->Eta(t3)*cR2*( BS->S1d(t2,t4)*BS->Mu(t1)*cR1 -
			       BS->S1d(t1,t4)*BS->Mu(t2)*cL1 );
}

template<>
inline Complex Basic_Zfunc::ZTM<-1,-1,-1,+1>(const int t1,const int t2,const int t3,const int t4,
				     const Complex& cR1,const Complex& cL1,
				     const Complex& cR2,const Complex& cL2) {
  return -2.*BS->Eta(t2)*cL1*( BS->S1d(t4,t1)*BS->Mu(t3)*cR2 -
			       BS->S1d(t3,t1)*BS->Mu(t4)*cL2 );
}

template<>
inline Complex Basic_Zfunc::ZTM<-1,-1,+1,-1>(const int t1,const int t2,const int t3,const int t4,
				     const Complex& cR1,const Complex& cL1,
				     const Complex& cR2,const Complex& cL2) {
  return -2.*BS->Eta(t1)*cL1*( BS->S0d(t2,t3)*BS->Mu(t4)*cR2 -
			       BS->S0d(t2,t4)*BS->Mu(t3)*cL2 );
}

template<>
inline Complex Basic_Zfunc::ZTM<-1,+1,-1,-1>(const int t1,const int t2,const int t3,const int t4,
				     const Complex& cR1,const Complex& cL1,
				     const Complex& cR2,const Complex& cL2) {
  return -2.*BS->Eta(t4)*cL2*( BS->S1d(t3,t1)*BS->Mu(t2)*cL1 -
			       BS->S1d(t3,t2)*BS->Mu(t1)*cR1 );
}

template<>
inline Complex Basic_Zfunc::ZTM<+1,-1,-1,-1>(const int t1,const int t2,const int t3,const int t4,
				     const Complex& cR1,const Complex& cL1,
				     const Complex& cR2,const Complex& cL2) {
  return -2.*BS->Eta(t3)*cL2*( BS->S0d(t2,t4)*BS->Mu(t1)*cL1 -
			       BS->S0d(t1,t4)*BS->Mu(t2)*cR1 );
}

template<>
inline Complex Basic_Zfunc::ZTM<+1,-1,-1,+1>(const int t1,const int t2,const int t3,const int t4,
				     const Complex& cR1,const Complex& cL1,
				     const Complex& cR2,const Complex& cL2) {
  return -2.*(BS->Mu(t1)*BS->Mu(t4)*BS->Eta(t2)*BS->Eta(t3)*cL2*cL1 +
	      BS->Mu(t2)*BS->Mu(t3)*BS->Eta(t1)*BS->Eta(t4)*cR2*cR1 -
	      BS->Mu(t1)*BS->Mu(t3)*BS->Eta(t2)*BS->Eta(t4)*cR2*cL1 -
	      BS->Mu(t2)*BS->Mu(t4)*BS->Eta(t1)*BS->Eta(t3)*cL2*cR1);
}

template<>
inline Complex Basic_Zfunc::ZTM<-1,+1,+1,-1>(const int t1,const int t2,const int t3,const int t4,
				     const Complex& cR1,const Complex& cL1,
				     const Complex& cR2,const Complex& cL2) {
  return -2.*(BS->Mu(t1)*BS->Mu(t4)*BS->Eta(t2)*BS->Eta(t3)*cR2*cR1 +
	      BS->Mu(t2)*BS->Mu(t3)*BS->Eta(t1)*BS->Eta(t4)*cL2*cL1 -
	      BS->Mu(t1)*BS->Mu(t3)*BS->Eta(t2)*BS->Eta(t4)*cL2*cR1 -
	      BS->Mu(t2)*BS->Mu(t4)*BS->Eta(t1)*BS->Eta(t3)*cR2*cL1);
}

template<>
inline Complex Basic_Zfunc::ZTM<+1,-1,+1,-1>(const int t1,const int t2,const int t3,const int t4,
				     const Complex& cR1,const Complex& cL1,
				     const Complex& cR2,const Complex& cL2) {
  return Complex(0.,0.);
}

template<>
inline Complex Basic_Zfunc::ZTM<-1,+1,-1,+1>(const int t1,const int t2,const int t3,const int t4,
				     const Complex& cR1,const Complex& cL1,
				     const Complex& cR2,const Complex& cL2) {
  return Complex(0.,0.);
}

template<>
inline Complex Basic_Zfunc::ZTM<+1,+1,-1,-1>(const int t1,const int t2,const int t3,const int t4,
				     const Complex& cR1,const Complex& cL1,
				     const Complex& cR2,const Complex& cL2) {
  return -2.*(BS->S0d(t1,t4)*BS->S1d(t2,t3)*cL2*cR1
	      -BS->Mu(t1)*BS->Mu(t2)*BS->Eta(t3)*BS->Eta(t4)*cL2*cL1
	      -BS->Mu(t3)*BS->Mu(t4)*BS->Eta(t1)*BS->Eta(t2)*cR2*cR1);
}

template<>
inline Complex Basic_Zfunc::ZTM<-1,-1,+1,+1>(const int t1,const int t2,const int t3,const int t4,
				     const Complex& cR1,const Complex& cL1,
				     const Complex& cR2,const Complex& cL2) {
  return -2.*(BS->S1d(t1,t4)*BS->S0d(t2,t3)*cR2*cL1
	      -BS->Mu(t1)*BS->Mu(t2)*BS->Eta(t3)*BS->Eta(t4)*cR2*cR1
	      -BS->Mu(t3)*BS->Mu(t4)*BS->Eta(t1)*BS->Eta(t2)*cL2*cL1);
}

//massless ZT's

template<>
inline Complex Basic_Zfunc::ZT<+1,+1,+1,+1>(const int t1,const int t2,const int t3,const int t4,
				     const Complex& cR1,const Complex& cL1,
				     const Complex& cR2,const Complex& cL2) {
  return -2.*BS->S0d(t3,t1)*BS->S1d(t4,t2)*cR1*cR2;
}

template<>
inline Complex Basic_Zfunc::ZT<-1,-1,-1,-1>(const int t1,const int t2,const int t3,const int t4,
				     const Complex& cR1,const Complex& cL1,
				     const Complex& cR2,const Complex& cL2) {
  return -2.*BS->S1d(t3,t1)*BS->S0d(t4,t2)*cL1*cL2;
}

template<>
inline Complex Basic_Zfunc::ZT<+1,+1,-1,-1>(const int t1,const int t2,const int t3,const int t4,
				     const Complex& cR1,const Complex& cL1,
				     const Complex& cR2,const Complex& cL2) {
  return -2.*BS->S0d(t1,t4)*BS->S1d(t2,t3)*cL2*cR1;
}

template<>
inline Complex Basic_Zfunc::ZT<-1,-1,+1,+1>(const int t1,const int t2,const int t3,const int t4,
				     const Complex& cR1,const Complex& cL1,
				     const Complex& cR2,const Complex& cL2) {
  return -2.*BS->S1d(t1,t4)*BS->S0d(t2,t3)*cR2*cL1;
}



}
  
