@node Hadronization
@section Hadronization

The hadronization setup is covered by the `(fragmentation)' section of
the steering file or the fragmentation data file `Fragmentation.dat',
respectively.

It covers the fragmentation of partons into primordial hadrons as well as the
decays of unstable hadrons into stable final states.

@menu
* Fragmentation:: The fragmentation module, and its parameters.
* Hadron decays:: The hadron decay module, and its parameters.
@end menu

@node Fragmentation
@subsection Fragmentation

@subsubsection Fragmentation models

@cindex FRAGMENTATION
@cindex MSTJ
@cindex MSTP
@cindex MSTU
@cindex PARP
@cindex PARJ
@cindex PARU

The @code{FRAGMENTATION} parameter sets the fragmentation module to be employed
during event generation. 
@itemize @bullet 
@item 
      The default is @option{Ahadic}, enabling Sherpa's native hadronization 
      model AHADIC++, based on the cluster fragmentation model introduced in 
      @mycite{Field1982dg}, @mycite{Webber1983if}, @mycite{Gottschalk1986bv}, 
      and @mycite{Marchesini1987cf} and implementing some modifications 
      discussed in @mycite{Winter2003tt}.   
@item 
      the hadronization can be disabled with the value @option{Off}. 
@item 
      To evaluate uncertainties stemming from the hadronization, Sherpa also 
      provides an interface to the Lund string fragmentation in Pythia 6.4 
      @mycite{Sjostrand2006za} by using the setting @option{Lund}.
      In this case, the standard Pythia switches @option{MSTJ}, @option{MSTP},
      @option{MSTU}, @option{PARP}, @option{PARJ} and @option{PARU}
      can be used to steer the behaviour of the Lund string, see
      @mycite{Sjostrand2006za}. They are specified as
      @code{MSTJ(<number>)=<value>}.
@end itemize

The following parameters steer the @option{Ahadic} fragmentation model and
up-to-date default values of these parameters can be found in
@code{AHADIC++/Tools/Hadronisation_Parameters.C}.

@subsubsection Hadron constituents
@cindex M_UP_DOWN
@cindex M_STRANGE
@cindex M_CHARM
@cindex M_BOTTOM
@cindex M_DIQUARK_OFFSET
@cindex M_BIND_0
@cindex M_BIND_1

The constituent masses of the quarks and diquarks are given by 
@itemize @bullet
@item @code{M_UP_DOWN}
@item @code{M_STRANGE}
@item @code{M_CHARM}
@item @code{M_BOTTOM}
@end itemize
The diquark masses are composed of the quark 
masses and some additional parameters,
@iftex
  \bean
  m_{12} = (m_1+m_2+m_{\mathrm{offset}})\times(1+m_{\mathrm{bind}})
@end iftex
with 
@itemize @bullet
@item @code{M_DIQUARK_OFFSET}
@item @code{M_BIND_0}
@item @code{M_BIND_1}
@end itemize

@subsubsection Hadron multiplets
@cindex MULTI_WEIGHT_L0R0_PSEUDOSCALARS
@cindex MULTI_WEIGHT_L0R0_VECTORS
@cindex MULTI_WEIGHT_L0R0_TENSORS2
@cindex MULTI_WEIGHT_L0R0_TENSORS3
@cindex MULTI_WEIGHT_L0R0_TENSORS4
@cindex MULTI_WEIGHT_L1R0_SCALARS
@cindex MULTI_WEIGHT_L1R0_AXIALVECTORS
@cindex MULTI_WEIGHT_L1R0_TENSORS2
@cindex MULTI_WEIGHT_L2R0_VECTORS
@cindex MULTI_WEIGHT_L3R0_VECTORS
@cindex MULTI_WEIGHT_L0R1_SCALARS
@cindex MULTI_WEIGHT_L0R1_AXIALVECTORS
@cindex MULTI_WEIGHT_L0R0_N_1/2
@cindex MULTI_WEIGHT_L0R0_N*_1/2
@cindex MULTI_WEIGHT_L1R0_N*_1/2
@cindex MULTI_WEIGHT_L1R0_N*_3/2
@cindex MULTI_WEIGHT_L0R0_DELTA_3/2
@cindex MULTI_WEIGHT_L1R0_DELTA*_3/2
@cindex HEAVY_BARYON_ENHANCEMEMT
@cindex SINGLET_SUPPRESSION
@cindex Mixing_0+
@cindex Mixing_1-

For the selection of hadrons emerging in such cluster transitions and decays,
an overlap between the cluster flavour content and the flavour part of the 
hadronic wave function is formed.  This may be further modified by production
probabilities, organised by multiplet and given by the parameters
@itemize @bullet
@item @code{MULTI_WEIGHT_L0R0_PSEUDOSCALARS}
@item @code{MULTI_WEIGHT_L0R0_VECTORS}
@item @code{MULTI_WEIGHT_L0R0_TENSORS2}
@item @code{MULTI_WEIGHT_L0R0_TENSORS3}
@item @code{MULTI_WEIGHT_L0R0_TENSORS4}
@item @code{MULTI_WEIGHT_L1R0_SCALARS}
@item @code{MULTI_WEIGHT_L1R0_AXIALVECTORS}
@item @code{MULTI_WEIGHT_L1R0_TENSORS2}
@item @code{MULTI_WEIGHT_L2R0_VECTORS}
@item @code{MULTI_WEIGHT_L3R0_VECTORS}
@item @code{MULTI_WEIGHT_L0R1_SCALARS}
@item @code{MULTI_WEIGHT_L0R1_AXIALVECTORS}
@item @code{MULTI_WEIGHT_L0R0_N_1/2}
@item @code{MULTI_WEIGHT_L0R0_N*_1/2}
@item @code{MULTI_WEIGHT_L1R0_N*_1/2}
@item @code{MULTI_WEIGHT_L1R0_N*_3/2}
@item @code{MULTI_WEIGHT_L0R0_DELTA_3/2}
@item @code{MULTI_WEIGHT_L1R0_DELTA*_3/2}
@end itemize
In addition, there are some enhancement and suppression factors applied to 
heavy baryons and meson singlets,
@itemize @bullet
@item @code{HEAVY_BARYON_ENHANCEMEMT}
@item @code{SINGLET_SUPPRESSION}
@end itemize
For the latter, Sherpa also allows
to redfine the mixing angles through parameters such as
@itemize @bullet
@item @code{Mixing_0+}
@item @code{Mixing_1-}
@end itemize

@subsubsection Cluster transition to hadrons - flavour part
@cindex STRANGE_FRACTION
@cindex BARYON_FRACTION
@cindex P_@{QS@}/P_@{QQ@}
@cindex P_@{SS@}/P_@{QQ@}
@cindex P_@{QQ_1@}/P_@{QQ_0@}
@cindex TRANSITION_OFFSET
@cindex DECAY_OFFSET

The phase space effects due to these masses govern to a large extent the 
flavour content of the non-perturbative gluon splittings at the end of the 
parton shower and in the decay of clusters.  They are further modified by 
relative probabilities with respect to the production of up/down flavours 
through the parameters 
@itemize @bullet
@item @code{STRANGE_FRACTION}
@item @code{BARYON_FRACTION}
@item @code{P_@{QS@}/P_@{QQ@}}
@item @code{P_@{SS@}/P_@{QQ@}}
@item @code{P_@{QQ_1@}/P_@{QQ_0@}}
@end itemize

The transition of clusters to hadrons is governed by the following 
considerations: 
@itemize @bullet
@item 
      Clusters can be interpreted as excited hadrons, with a continous mass
      spectrum.
@item 
      When a cluster becomes sufficiently light such that its mass is below
      the largest mass of any hadron with the same flavour content, it must
      be re-iterpreted as such a hadron.  In this case it will be shifted on
      the corresponding hadron mass, and the recoil will be distributed to the
      ``neighbouring'' clusters or by emitting a soft photon.  This comparison 
      of masses clearly depends on the multiplets switched on in AHADIC++, 
      see above.
      @c , and on an additional offset, which provides an important 
      @c tuning parameter, namely 
      @c @itemize @bullet
      @c @item @code{TRANSITION_OFFSET} (default 0 MeV).   
      @c @end itemize
@item 
      In addition, clusters may becomes sufficiently light such that they 
      should decay directly into two hadrons instead of two clusters.  
      This decision is based on the heaviest hadrons accessible in
      a decay.
      @c , modulated by another offset parameter, 
      @c @itemize @bullet
      @c @item @code{DECAY_OFFSET} (default 800 MeV).     
      @c @end itemize
@item
      If both options, transition and decay, are available, there is a 
      competition between  
@end itemize
 
@subsubsection Cluster transition and decay weights
@cindex MassExponent_C->HH

The probability for a cluster C to be transformed into a hadron H is given by
a combination of weights, obtained from the overlap with the flavour part of
the hadronic wave function, the relative weight of the corresponding multiplet
and a kinematic weight taking into account the mass difference of cluster
and hadron and the width of the latter.
@iftex
        \bean
        \mathcal{P}_{C\to H} = 
        \left\langle f_1\bar f_2 | \psi_{H, 12}\right\rangle\,\times\,
        \mathcal{P}_{\mathrm{multiplet}}\,\times\,
        \left(\frac{m_H^2}{(m_C^2-m_H^2)+\Gamma_h^2/4.}\right)   
        \eean
@end iftex
For the direct decay of a cluster into two hadrons the overlaps with the
wave functions of all hadrons, their respective multiplet suppression weights,
the flavour weight for the creation of the new flavour q and a kinematical
factor are relevant.  Here, yet another tuning paramter enters,
@itemize @bullet
@item @code{MassExponent_C->HH}
@end itemize
which partially compensates phase space effects favouring light hadrons,
@iftex
        \bean
        \mathcal{P}_{C\to H_1H_2} = 
        \mathcal{P}_q\,\times\,
        \left\langle f_1\bar f_2 | \psi_{H, 1q}\psi_{H, q2}\right\rangle
        \,\times\,
        \mathcal{P}_{\mathrm{multiplet}}\,\times\,
        \mathcal{P}_{\mathrm{multiplet}}\,\times\,      
        \frac{\sqrt{[m_C^2-(m_{H_1}+m_{H_2})^2][m_C^2-(m_{H_1}-m_{H_2})^2]}}
                {16\pi m_C^3}\,\times\,   
                \left(\frac{4m_{H_1}m_{H_2}}{m_C^2}\right)^\chi\,.
        \eean
@end iftex


@subsubsection Cluster decays - kinematics
@cindex PT^2_0
@cindex PT_MAX
@cindex Q_as^2

Cluster decays are generated by firstly emitting a non-perturbative ``gluon''
from one of the quarks, using a transverse momentum distribution as in the
non-perturbative gluon decays, see below, and by then splitting this gluon into
a quark--antiquark of anti-diquark--diquark pair, again with the same 
kinematics.  In the first of these splittings, the emission of the gluon,
though, the energy distribution of the gluon is given by the quark splitting
function, if this quark has been produced in the perturbative phase of the
event.  If, in contrast, the quark stems from a cluster decay, the energy
of the gluon is selected according to a flat distribution.    

In clusters decaying to hadrons, the transverse momentum is chosen according
to a distribution given by an infrared-continued strong coupling and a
term inversemly proportional to the infrared-modified transverse momentum,
@iftex
        \bean
        \mathcal{P}(p_\perp^2) \propto
        \frac{\alpha_s^{(IR)}(p_\perp^2)}{p_\perp^2+p_{\perp,0}^2}\,,
        \eean
@end iftex
constrained to be below a maximal transverse momentum.  The respective 
tuning parameters are
@itemize @bullet
@item @code{PT^2_0}
@item @code{PT_MAX}
@item @code{Q_as^2}
@end itemize
@iftex
The strong coupling is given by 
    \bean
    \alpha_s^{(IR)}(p_\perp^2) = \alpha_s(p_\perp^2+p_{\per,0}^2)
    \eean
@end iftex

@subsubsection Splitting kinematics

In each splitting, the kinematics is given by the transverse momentum, the
energy splitting parameter and the azimuthal angle.  The latter, the azimuthal
angle is always seleectred according to a flat distribution, while the energy
splitting parameter will either be chosen according to the quark-to-gluon 
splitting function (if the quark is a leading quark, i.e. produced in the
pertrubative phase), to the gluon-to-quark splitting function, or according to
a flat distribution.  The transverse momentum is given by the same 
distribution as in the cluster decays to hadrons.



@node Hadron decays
@subsection Hadron decays
@cindex DECAYMODEL
@cindex WIDTH[<id>]
@cindex MASS[<id>]
@cindex STABLE[<id>]
@cindex DECAYPATH
@cindex SOFT_MASS_SMEARING
@cindex MAX_PROPER_LIFETIME

The treatment of hadron and tau decays is specified by @code{DECAYMODEL}.
Its allowed values are either the default choice @option{Hadrons}, which
renders the HADRONS++ module responsible for performing the decays, or the
hadron decays can be disabled with the option @option{Off}.

HADRONS++ is the module within the Sherpa framework which is responsible for
treating hadron and tau decays.  It contains decay tables with branching 
ratios for approximately 2500 decay channels, of which many have their kinematics 
modelled according to a matrix element with corresponding form factors.
Especially decays of the tau lepton and heavy mesons have form factor models
similar to dedicated codes like Tauola @mycite{Jadach1993hs} and
EvtGen @mycite{Lange2001uf}.

Some general switches which relate to hadron decays can be adjusted in the
@code{(fragmentation)} section:

@itemize @bullet
@item @anchor{DECAYPATH} @code{DECAYPATH} 
  The path to the parameter files for the hadron and tau decays
  (default: @code{Decaydata/}). It is important to note that the path 
  has to be given relative to the current working directory.
  If it doesn't exist, the default Decaydata
  directory (@code{<prefix>/share/SHERPA-MC/Decaydata}) will be used.
@item  Hadron properties like mass, width, stable/unstable and active can be set
  in full analogy to the settings for fundamental particles
  in the @code{(model)} section (cf. @ref{Models}).
@item @anchor{SOFT_MASS_SMEARING} 
      @code{SOFT_MASS_SMEARING = [0,1,2]} (default: 1) 
  Determines whether particles entering the hadron decay event
  phase should be put off-shell according to their mass
  distribution. It is taken care that no decay mode is suppressed
  by a potentially too low mass. While HADRONS++ determines this dynamically
  from the chosen decay channel, for @code{Pythia} as hadron decay handler
  its @code{w-cut} parameter is employed. Choosing option 2 instead of 1 will
  only set unstable (decayed) particles off-shell, but leave stable particles
  on-shell.
@item @anchor{MAX_PROPER_LIFETIME} @code{MAX_PROPER_LIFETIME = [mm]} 
  Parameter for maximum proper lifetime (in mm) up to which particles
  are considered unstable. If specified, this will make long-living particles
  stable, even if they are set unstable by default or by the user.
@end itemize

Many aspects of the above mentioned ``Decaydata'' can be adjusted.
There exist three levels of data files, which are explained in the following
sections.
As with all other setup files, the user can either employ the default
``Decaydata'' in @code{<prefix>/share/SHERPA-MC/Decaydata}, or
overwrite it (also selectively) by creating the appropriate files in the
directory specified by @code{DECAYPATH}.


@subsubsection HadronDecays.dat

@code{HadronDecays.dat} consists of a table of particles that are to be decayed
by HADRONS++. Note: Even if decay tables exist for the other particles, only those
particles decay that are set unstable, either by default, or in the
model/fragmentation settings. It has the following structure, where each line
adds one decaying particle:

@iftex
\begin{center}
  \begin{tabular}{|cccc|}
    \hline
    \verb!<kf-code>! &\verb!->! &\verb!<subdirectory>/!&\verb!<filename>.dat! \\
    \hline
    \hline
    $\downarrow$     &          &$\downarrow$           &$\downarrow$ \\
    decaying particle&      & path to decay table   & decay table file\\
    \hline
    default names:   && \verb!<particle>/!&\verb!Decays.dat!\\
    \hline
  \end{tabular}
\end{center}
@end iftex

@ifnottex
@multitable @columnfractions .33 .33 .33 
@item <kf-code>@ @ @ @ @ @ @ ->  
@tab <subdirectory>/
@tab <filename>.dat
@item decaying particle @ @ @  
@tab path to decay table @ @ @  
@tab decay table file    
@item default names:
@tab <particle>/
@tab Decays.dat
@end multitable
@end ifnottex

It is possible to specify different decay tables for the particle (positive
kf-code) and anti-particle (negative kf-code). If only one is specified, it
will be used for both particle and anti-particle.

If more than one decay table is specified for the same kf-code, these tables
will be used in the specified sequence during one event. The first matching
particle appearing in the event is decayed according to the first table, and
so on until the last table is reached, which will be used for the remaining
particles of this kf-code.

Additionally, this file may contain the keyword @code{CREATE_BOOKLET} on a separate
line, which will cause HADRONS++ to write a LaTeX document containing all decay
tables.

@subsubsection Decay table files  

The decay table contains information about outgoing particles for each channel,
its branching ratio and eventually the name of the file that stores parameters
for a specific channel. If the latter is not specified HADRONS++ will produce it and
modify the decay table file accordingly.

Additionally to the branching ratio, one may specify the error associated with
it, and its source. Every hadron is supposed to have its own decay table in
its own subdirectory. The structure of a decay table is
@iftex
\begin{center}
  \begin{tabular}{|ccccc|}
    \hline
    \verb!{kf1,kf2,kf3,...}!  &\verb!|! &\verb!BR(!$\Delta$\verb!BR)[Origin]!
    &\verb!|! &\verb!<filename>.dat! \\
    \hline
    $\downarrow$     &&$\downarrow$     &&$\downarrow$ \\
    outgoing particles&&branching ratio && decay channel file\\
    \hline
  \end{tabular}
\end{center}
@end iftex
@ifnottex
@multitable @columnfractions .33 .33 .33 
@item @{kf1,kf2,kf3,...@} 
@tab BR(delta BR)[Origin] @ @ @ @ @ @ 
@tab <filename>.dat
@item outgoing particles @ @ @ @ @ @ 
@tab branching ratio @ @ @ @ @ @ 
@tab decay channel file
@end multitable
@end ifnottex
It should be stressed here that the branching ratio which is explicitly given for any
individual channel in this file is @strong{always used} regardless of any
matrix-element value.

@anchor{Decay channel files}
@subsubsection Decay channel files

A decay channel file contains various information about that specific decay
channel. There are different sections, some of which are optional:

@itemize @bullet
@item 
@verbatim
<Options>
    AlwaysIntegrate = 0
    CPAsymmetryC = 0.0
    CPAsymmetryS = 0.0
</Options>
@end verbatim

  @itemize @bullet
  @item  @code{AlwaysIntegrate = [0,1]} For each decay channel, one needs an
    integration result for unweighting the kinematics (see below). This
    result is stored in the decay channel file, such that the
    integration is not needed for each run. The AlwaysIntegrate option
    allows to bypass the stored integration result, and do the integration
    nonetheless (same effect as deleting the integration result).
  @item  @code{CPAsymmetryC/CPAsymmetryS} If one wants to include time dependent
    CP asymmetries through interference between mixing and decay one can
    set the coefficients of the cos and sin terms respectively.
    HADRONS++ will then respect these asymmetries between particle and
    anti-particle in the choice of decay channels.
  @end itemize

@item 
@verbatim
<Phasespace>
  1.0 MyIntegrator1
  0.5 MyIntegrator2
</Phasespace>
@end verbatim
  Specifies the phase-space mappings and their weight.

@item 
@verbatim
<ME>
  1.0 0.0 my_matrix_element[X,X,X,X,X,...]
  1.0 0.0 my_current1[X,X,...] my_current2[X,X,X,...]
</ME>
@end verbatim
  Specifies the matrix elements or currents used for the kinematics,
  their respective weights, and the
  order in which the  particles (momenta) enter them. For more details, the
  reader is referred to @mycite{Krauss2010xx}.

@item 
@verbatim
<my_matrix_element[X,X,X,X,X,...]>
  parameter1 = value1
  parameter2 = value2
  ...
</my_matrix_element[X,X,X,X,X,...]>
@end verbatim
  Each matrix element or current may have an additional section where one
  can specify needed parameters, e.g. which form factor model to choose.
  Each parameter has to be specified on a new line as shown above. Available
  parameters are listed in @mycite{Krauss2010xx}.
  Parameters not specified get a default value,
  which might not make sense in specific decay channels. One may also specify
  often needed parameters in @code{HadronConstants.dat}, but they will get
  overwritten by channel specific parameters, should these exist.

@item 
@verbatim
<Result>
  3.554e-11 6.956e-14 1.388e-09;
</Result>
@end verbatim
  These last three lines have quite an important meaning. If they
  are missing, HADRONS++ integrates this channel during the initialization
  and adds the result lines.
  If this section exists though, and @code{AlwaysIntegrate} is off
  (the  default value, see above) then HADRONS++ reads in the maximum for
  the kinematics unweighting.
  
  Consequently, if some parameters are changed (also masses of incoming and
  outgoing particles) the maximum might change such that a new integration is
  needed in order to obtain correct kinematical distributions. There are two
  ways to enforce the integration: either by deleting the last three lines or
  by setting @code{AlwaysIntegrate} to 1. When a channel is re-integrated, HADRONS++
  copies the old decay channel file into @code{.<filename>.dat.old}.
@end itemize

@subsubsection HadronConstants.dat 

@code{HadronConstants.dat} may contain some globally needed parameters (e.g.
for neutral meson mixing, see @mycite{Krauss2010xx}) and also fall-back
values for all matrix-element parameters which one specifies in decay channel
files. Here, the @code{Interference_X = 1} switch would enable rate asymmetries
due to CP violation in the interference between mixing and decay
(cf. @ref{Decay channel files}), and setting @code{Mixing_X = 1}
enables explicit mixing in the event record according to the time evolution of
the flavour states. By default, all mixing effects are turned off.
@itemize @bullet
@item  Mixing parameters 
@iftex
($x = \frac{\Delta m}{\Gamma}$,
  $y = \frac{\Delta \Gamma}{2\Gamma}$) 
@end iftex
  with some example values
@verbatim
x_K = 0.946
y_K = -0.9965
qoverp2_K = 1.0
Interference_K = 0
Mixing_K = 0

x_D = 0.0
y_D = 0.0
qoverp2_D = 1.0
Interference_D = 0
Mixing_D = 0

x_B = 0.776
y_B = 0.0
qoverp2_B = 1.0
Interference_B = 1
Mixing_B = 0

x_B(s) = 30.0
y_B(s) = 0.155
qoverp2_B(s) = 1.0
Interference_B(s) = 0
Mixing_B(s) = 0
@end verbatim

@end itemize


@subsubsection Further remarks
@cindex SOFT_SPIN_CORRELATIONS
@cindex HARD_SPIN_CORRELATIONS

@strong{Spin correlations:}
a spin correlation algorithm is implemented. It can be switched on through the
keyword @option{SOFT_SPIN_CORRELATIONS=1} in the @code{(run)} section.

If spin correlations for tau leptons
produced in the hard scattering process are supposed to be taken into account,
one needs to specify @option{HARD_SPIN_CORRELATIONS=1} as well. If using
AMEGIC++ as ME generator, note that the Process libraries have to be re-created
if this is changed.

@strong{Adding new channels:}
if new channels are added to HADRONS++ (choosing isotropic decay kinematics) a new 
decay table must be defined and the corresponding hadron must be added to @code{HadronDecays.dat}. 
The decay table merely needs to consist of the outgoing particles and branching ratios, i.e. the 
last column (the one with the decay channel file name) can safely be dropped. By running Sherpa
it will automatically produce the decay channel files and write their names in the decay table. 

@strong{Some details on tau decays:}
$\tau$ decays are treated within the HADRONS++ framework, even though the
$\tau$ is not a hadron. As for many hadron decays, the hadronic tau decays
have form factor models implemented, for details the reader is referred to
@mycite{Krauss2010xx}.


