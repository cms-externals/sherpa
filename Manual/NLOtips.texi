@node NLO calculations
@section NLO calculations

@menu
* Choosing DIPOLE_ALPHA::
* Integrating complicated Loop-ME::
* Avoiding misbinning effects::
* Enforcing the renormalization scheme::
* Checking the pole cancellation::
@end menu

@node Choosing DIPOLE_ALPHA
@subsection Choosing DIPOLE_ALPHA

A variation of the parameter @code{DIPOLE_ALPHA} 
(see @ref{Dipole subtraction}) changes the 
contribution from the real (subtracted) piece (@code{RS}) and 
the integrated subtraction terms (@code{I}), keeping their sum constant.
Varying this parameter provides a nice check of the consistency 
of the subtraction procedure and it allows to optimize the
integration performance of the real correction. This piece
has the most complicated momentum phase space and is often the
most time consuming part of the NLO calculation.
The optimal choice depends on the specific setup and can be 
determined best by trial. 

Hints to find a good value: 
@itemize
@item The smaller @code{DIPOLE_ALPHA} is the less dipole term have to be
calculated, thus the less time the evaluation/phase space point takes.
@item Too small choices lead to large cancelations between the @code{RS}
and the @code{I} parts and thus to large statisical errors.
@item For very simple processes (with only a total of two 
partons in the iniatial and the final state
of the born process) the best choice is typically @code{DIPOLE_ALPHA=1}.
The more complicated a process is the smaller @code{DIPOLE_ALPHA} should be
(e.g. with 5 partons the best choice is typically around 0.01).
@item A good choice is typically such that the cross section from the 
@code{RS} piece is significantly positive but not much larger than 
the born cross section.
@end itemize

@node Integrating complicated Loop-ME
@subsection Integrating complicated Loop-ME

For complicated processes the evaluation of one-loop matrix elements
can be very time consuming. The generation time of a fully optimized 
integration grid can become prohibitively long. Rather than using a 
poorly optimized grid in this case it is more advisable to use a grid
optimized with either the born matrix elements or the born matrix 
elements and the finite part of the integrated subtraction terms only,
working under the assumption that the distibutions in phase space are 
rather similar.

This can be done by one of the following methods:
@enumerate 3
@item Employ a dummy virtual (requires no computing time, returns 
      @code{0.} as its finite result) to optimise the grid. This 
      only works if @code{V} is not the only @code{NLO_QCD_Part} 
      specified.
  @enumerate
  @item During integration set the @code{Loop_Generator} to 
        @code{Internal} and add @code{USE_DUMMY_VIRTUAL=1} to 
        your @code{(run)@{...@}(run)} section. The grid will 
        then be optimised to the phase space distribution of 
        the sum of the Born matrix element and the finite part 
        of the integrated subtraction term. @b{Note:} The 
        cross section displayed during integration will also 
        correspond to the sum of the Born matrix element and 
        the finite part of the integrated subtraction term.
  @item During event generation reset @code{Loop_Generator} to 
        your generator supplying the virtual correction. The 
        events generated then carry the correct event weight.
  @end enumerate
@item Suppress the evaluation of the virtual and/or the integrated 
      subtraction terms. This only works if Amegic is used as the 
      matrix element generator for the @code{BVI} pieces and @code{V} 
      is not the only @code{NLO_QCD_Part} specified.
  @enumerate
  @item During integration add @code{NLO_BVI_MODE=<num>} to your 
        @code{(run)@{...@}(run)} section. @code{<num>} takes the 
        following values: @code{1}-@code{B}, @code{2}-@code{I}, 
        and @code{4}-@code{V}. The values are additive, i.e. 
        @code{3}-@code{BI}. @b{Note:} The cross section displayed 
        during integration will match the parts selected by 
        @code{NLO_BVI_MODE}.
  @item During event generation remove the switch again and the 
        events will carry the correct weight.
  @end enumerate
@end enumerate

Note: this will not work for the @code{RS} piece!

@node Avoiding misbinning effects
@subsection Avoiding misbinning effects

Close to the infrared limit, the real emission matrix element and
corresponding subtraction events exhibit large cancellations. If the
(minor) kinematics difference of the events happens to cross a parton-level
cut or analysis histogram bin boundary, then large spurious spikes can appear.

These can be smoothed to some extend by shifting the weight from the subtraction
kinematic to the real-emission kinematic if the dipole measure alpha is below a given
threshold. The fraction of the shifted weight is inversely proportional to the
dipole measure, such that the final real-emission and subtraction weights are
calculated as:
@verbatim
  w_r -> w_r + sum_i [1-x(alpha_i)] w_{s,i}
  foreach i: w_{s,i} -> x(alpha_i) w_{s,i}
@end verbatim
with the function x(alpha)=(alpha/|alpha_0|)^n for alpha<alpha_0 and 1 otherwise.

The threshold can be set by the parameter
@option{NLO_SMEAR_THRESHOLD=<alpha_0>} and the functional form of alpha and thus
interpretation of the threshold can be chosen by its sign (positive: relative
dipole kT in GeV, negative: dipole alpha).
In addition, the exponent n can be set by @option{NLO_SMEAR_POWER=<n>}.

@node Enforcing the renormalization scheme
@subsection Enforcing the renormalization scheme
@cindex LOOP_ME_INIT
Sherpa takes information about the renormalization scheme from the loop ME generator.
The default scheme is MSbar, and this is assumed if no loop ME is provided,
for example when integrated subtraction terms are computed by themselves.
This can lead to inconsistencies when combining event samples, which may be avoided
by setting @option{LOOP_ME_INIT=1} in the @code{(run)} section of the input file.

@node Checking the pole cancellation
@subsection Checking the pole cancellation
@cindex CHECK_BORN
@cindex CHECK_FINITE
@cindex CHECK_POLES
@cindex CHECK_POLES_THRESHOLD
To check whether the poles of the dipole subtraction and the interfaced
one-loop matrix element cancel phase space point by phase space point
@code{CHECK_POLES=1} can be specified. The accuracy to which the poles
do have to cancel can be set via @code{CHECK_POLES_THRESHOLD=<accu>}.
In the same way, the finite contributions of the infrared subtraction
and the one-loop matrix element can be checked by setting
@code{CHECK_FINITE=1}, and the Born matrix element via @code{CHECK_BORN=1}.

