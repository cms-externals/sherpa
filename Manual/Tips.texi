@node Tips and Tricks
@chapter Tips and tricks

@menu
* Bash completion:: How to add bash completion for Sherpa parameters
* Rivet analyses:: How to analyse Sherpa events using Rivet
* HZTool analyses:: How to analyse Sherpa events using HZTool
* MCFM interface:: How to use the MCFM interface in NLO calculation
* Debugging a crashing/stalled event::  How to recover the random seed for an event that is hanging or crashing
* Versioned installation:: How to install multiple Sherpa versions in the same prefix.
* NLO calculations::  How to efficiently perform NLO calculations
@end menu

@node Bash completion
@section Bash completion

Sherpa will install a file named
@samp{$prefix/share/SHERPA-MC/sherpa-completion} which contains tab completion
functionality for the bash shell. You simply have to source it in your active
shell session by running
@verbatim
  .  $prefix/share/SHERPA-MC/sherpa-completion
@end verbatim

and you will be able to tab-complete any parameters on a Sherpa
command line.

To permanently enable this feature in your bash shell, you'll have to add the
source command above to your ~/.bashrc.


@node Rivet analyses
@section Rivet analyses
@cindex ANALYSIS_OUTPUT

Sherpa is equipped with an interface to the analysis tool 
@uref{http://projects.hepforge.org/rivet/,,Rivet}. To enable it,
Rivet and @uref{http://lcgapp.cern.ch/project/simu/HepMC/,,HepMC}
have to be installed (e.g. using the Rivet bootstrap script)
and your Sherpa compilation has to be configured with the following options:
@verbatim
  ./configure --enable-hepmc2=/path/to/hepmc2 --enable-rivet=/path/to/rivet
@end verbatim

(Note: Both paths are equal if you used the Rivet bootstrap script.)

To use the interface, specify the switch
@verbatim
  Sherpa ANALYSIS=Rivet
@end verbatim

and create an analysis section in @code{Run.dat} that reads as follows:
@verbatim
  (analysis){
    BEGIN_RIVET {
      -a D0_2008_S7662670 CDF_2007_S7057202 D0_2004_S5992206 CDF_2008_S7828950
    } END_RIVET
  }(analysis)
@end verbatim

The line starting with @code{-a} specifies which Rivet analyses to run and the
histogram output file can be changed with the normal @code{ANALYSIS_OUTPUT}
switch.

You can also use @code{rivet-mkhtml} (distributed with Rivet) to create
plot webpages from Rivet's output files:
@verbatim
  source /path/to/rivetenv.sh   # see below
  rivet-mkhtml -o output/ file1.aida [file2.aida, ...]
  firefox output/index.html &
@end verbatim

If your Rivet installation is not in a standard location, the bootstrap script
should have created a @code{rivetenv.sh} which you have to source before running
the @code{rivet-mkhtml} script.

@node HZTool analyses
@section HZTool analyses
@cindex ANALYSIS_OUTPUT

Sherpa is equipped with an interface to the analysis tool
@uref{http://projects.hepforge.org/hztool/,,HZTool}. To enable it,
HZTool and @uref{http://cernlib.web.cern.ch/,,CERNLIB} have to be installed 
and your Sherpa compilation has to be configured with the following options:
@verbatim
  ./configure --enable-hztool=/path/to/hztool --enable-cernlib=/path/to/cernlib --enable-hepevtsize=4000
@end verbatim

To use the interface, specify the switch
@verbatim
  Sherpa ANALYSIS=HZTool
@end verbatim

and create an analysis section in @code{Run.dat} that reads as follows:
@verbatim
  (analysis){
    BEGIN_HZTOOL {
      HISTO_NAME output.hbook;
      HZ_ENABLE hz00145 hz01073 hz02079 hz03160;
    } END_HZTOOL;
  }(analysis)
@end verbatim

The line starting with @code{HZ_ENABLE} specifies which HZTool analyses to run.
The histogram output directory can be changed using the @code{ANALYSIS_OUTPUT}
switch, while @code{HISTO_NAME} specifies the hbook output file.

@node MCFM interface
@section MCFM interface
@cindex Loop_Generator

Sherpa is equipped with an interface to the NLO library of
@uref{http://mcfm.fnal.gov/,,MCFM} for decdicated processes. 
To enable it, MCFM has to be installed and compiled into a single library, 
libMCFM.a. To this end, an installation script is provided in
@code{AddOns/MCFM/install_mcfm.sh}. Please note, due to some process specific
changes that are made by the installation script to the MCFM code, only few
selected processes of MCFM-6.3 are available through the interface.

Finally, your Sherpa compilation has to be configured with the following
options:
@verbatim
  ./configure --enable-mcfm=/path/to/mcfm
@end verbatim
To use the interface, specify
@verbatim
  Loop_Generator MCFM;
@end verbatim
in the process section of the run card and add it to the list of generators 
in @ref{ME_SIGNAL_GENERATOR}. Of course, MCFM's process.DAT file has to be 
copied to the current run directory.


@node Debugging a crashing/stalled event
@section Debugging a crashing/stalled event

@subsection Crashing events
If an event crashes, Sherpa tries to obtain all the information needed to
reproduce that event and writes it out into a directory named
@verbatim
  Status__<date>_<time>
@end verbatim

If you are a Sherpa user and want to report this crash to the Sherpa team,
please attach a tarball of this directory to your email. This allows us to
reproduce your crashed event and debug it.

To debug it yourself, you can follow these steps
(Only do this if you are a Sherpa developer, or want to debug a problem
in an addon library created by yourself):
@itemize

@item Copy the random seed out of the status directory into your run path:
@verbatim
  cp  Status__<date>_<time>/random.dat  ./
@end verbatim

@item Run your normal Sherpa commandline with an additional parameter:
@verbatim
  Sherpa [...] STATUS_PATH=./
@end verbatim

Sherpa will then read in your random seed from ``./random.dat'' and
generate events from it.

@item Ideally, the first event will lead to the crash you saw earlier, and
you can now turn on debugging output to find out more about the details
of that event and test code changes to fix it:
@verbatim
  Sherpa [...] OUTPUT=15 STATUS_PATH=./
@end verbatim
@end itemize

@subsection Stalled events
If event generation seems to stall, you first have to find out
the number of the current event. For that you would terminate the stalled
Sherpa process (using Ctrl-c) and check in its final output for the number
of generated events.
Now you can request Sherpa to write out the random seed for the event before the
stalled one:
@verbatim
  Sherpa [...] EVENTS=[#events - 1] SAVE_STATUS=Status/
@end verbatim

(Replace [#events - 1] using the number you figured out earlier)

The created status directory can either be sent to the Sherpa developers,
or be used in the same steps as above to reproduce that event and debug it.

@node Versioned installation
@section Versioned installation

If you want to install different Sherpa versions into the same prefix
(e.g. /usr/local), you have to enable versioning of the installed directories
by using the configure option @samp{--enable-versioning}.
Optionally you can even pass an argument to this parameter of what you want the
version tag to look like.

@include NLOtips.texi
